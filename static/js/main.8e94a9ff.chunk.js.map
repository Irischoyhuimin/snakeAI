{"version":3,"sources":["SnakeGame/Snake.js","SnakeGame/SnakeFood.js","Algorithms/matrixUtil.js","Algorithms/BFS.js","Algorithms/DFS.js","Algorithms/Hamiltonian.js","Algorithms/DataStructures/PriorityQueue.js","Algorithms/BestFirstSearch.js","Algorithms/Astar.js","SnakeGame/SnakeGame.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snake","map","segment","ind","coordinates","left","pixelSize","top","width","height","className","key","style","SnakeFood","generateAdjacencyMatrix","areaSize","adjacencyMatrix","Array","from","gridWidth","gridHeight","_","fill","y","x","currentgridnum","neighbourgridnum","coordinateTogridNum","array","gridNumToCoordinate","num","Math","floor","BFS","findPath","timer","a","ms","Promise","res","setTimeout","snakeneckgridnum","gameState","length","snakeheaddgridnum","console","log","neckAdjustedMatrix","arr","slice","source","objective","food","visited","queue","distance","Number","MAX_SAFE_INTEGER","pred","setState","path","push","bfsAlgo","node","shift","i","options","visualize","reversePath","crawl","solve","reversepath","moveSnake","state","this","index","Component","DFS","dfsAlgo","pop","Hamiltonian","isSafe","pos","hamCycleUtil","v","QueueElement","element","priority","PriorityQueue","queueElement","heap","parentIndex","parent","minHeapify","leftchild","rightchild","smallest","largerNode","max","peak","isEmpty","elements","forEach","BestFirstSearch","heuristic","b","aCoordinate","bCoordinate","abs","camefrom","priorityQueue","bestfsalgo","current","includes","Astar","costsofar","aStarAlgo","newcost","initialState","direction","SnakeGame","getRandomCoordinate","xmax","areaSettings","ymax","random","onKeyDown","e","window","event","keyCode","segments","head","moveSnakeUp","moveSnakeDown","moveSnakeLeft","moveSnakeRight","isOutOfBounds","gameOver","alert","gameScore","currentAlgo","algorithm","clearInterval","manualsnake","refs","setInterval","gameSettings","snakeSpeed","scoreChangehandler","isSelfBite","isEat","enlargeSnake","increaseLength","document","onkeydown","unshift","algoMoveSnake","move","snakeHead","eaten","bfs","ref","dfs","hamil","bestFS","aStar","App","handleScorechange","val","score","handleWindowSize","gameHeight","divElement","clientHeight","gameWidth","clientWidth","ready","gameAreaSettings","addEventListener","Jumbotron","fluid","marginBottom","backgroundColor","Container","Row","Col","sm","align","margin","id","Form","Group","as","Label","column","Dropdown","Toggle","variant","Menu","Item","onClick","checked","onlabel","offlabel","onChange","Control","type","min","step","target","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e94a9ff.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Snake(props) {\n  return (\n    <div>\n      {props.snake.map((segment, ind) => {\n        const coordinates = {\n          left: `${segment[0] * props.pixelSize}px`,\n          top: `${segment[1] * props.pixelSize}px`,\n          width: `${props.pixelSize}px`,\n          height:`${props.pixelSize}px`\n        };\n\n        return <div className=\"SnakeSegment\" key={ind} style={coordinates} />;\n      })}\n    </div>\n  );\n}\n\nexport default Snake;","import React from \"react\";\n\nfunction SnakeFood(props) {\n  const coordinates = {\n    left: `${props.coordinates[0] * props.pixelSize}px`,\n    top: `${props.coordinates[1] * props.pixelSize}px`,\n    width: `${props.pixelSize}px`,\n    height:`${props.pixelSize}px`\n  };\n\n  return <div className=\"SnakeFood\" style={coordinates} />;\n}\n\nexport default SnakeFood;","const generateAdjacencyMatrix = (areaSize) => {\n    // Generate 2D array of size areaSize.gridWidth * areaSize.gridHeight filled with 0s\n    const adjacencyMatrix = Array.from(\n      Array(areaSize.gridWidth * areaSize.gridHeight),\n      (_) => Array(areaSize.gridWidth * areaSize.gridHeight).fill(0)\n    );\n  \n    for (let y = 0; y < areaSize.gridHeight; y += 1) {\n      for (let x = 0; x < areaSize.gridWidth; x += 1) {\n        const currentgridnum = y * areaSize.gridWidth + x;\n  \n        if (x + 1 < areaSize.gridWidth) {\n          const neighbourgridnum = y * areaSize.gridWidth + x + 1;\n          adjacencyMatrix[currentgridnum][neighbourgridnum] = 1;\n          adjacencyMatrix[neighbourgridnum][currentgridnum] = 1;\n        }\n  \n        if (y + 1 < areaSize.gridHeight) {\n          const neighbourgridnum = (y + 1) * areaSize.gridWidth + x;\n          adjacencyMatrix[currentgridnum][neighbourgridnum] = 1;\n          adjacencyMatrix[neighbourgridnum][currentgridnum] = 1;\n        }\n      }\n    }\n    return adjacencyMatrix;\n  };\n  \n  const coordinateTogridNum = (array, areaSize) => {\n    return array[1] * areaSize.gridWidth + array[0];\n  };\n  \n  const gridNumToCoordinate = (num, areaSize) => {\n    const array = [0, 0];\n    array[0] = num % areaSize.gridWidth;\n    array[1] = Math.floor(num / areaSize.gridWidth);\n  \n    return array;\n  };\n  \n  export { generateAdjacencyMatrix, coordinateTogridNum, gridNumToCoordinate };","import React, { Component } from \"react\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"./matrixUtil\";\n\nclass BFS extends Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props.areaSize)\n    this.adjacencyMatrix = generateAdjacencyMatrix(this.props.areaSize);\n    this.state = {\n      queue: [],\n      visited: [],\n      path: [],\n    };\n  }\n\n  findPath = async () => {\n    // snake cant go backwards\n    let snakeneckgridnum =\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][1] *\n        this.props.areaSize.gridWidth +\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][0];\n    let snakeheaddgridnum = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    console.log(snakeneckgridnum);\n    console.log(snakeheaddgridnum);\n\n    // Clone 2D array\n    let neckAdjustedMatrix = this.adjacencyMatrix.map(function (arr) {\n      return arr.slice();\n    });\n\n    neckAdjustedMatrix[snakeheaddgridnum][snakeneckgridnum] = 0;\n    neckAdjustedMatrix[snakeneckgridnum][snakeheaddgridnum] = 0;\n\n    let source = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    const objective = coordinateTogridNum(\n      this.props.gameState.food,\n      this.props.areaSize\n    );\n\n    let visited = new Array(neckAdjustedMatrix.length).fill(false);\n    let queue = [];\n    let distance = new Array(neckAdjustedMatrix.length).fill(\n      Number.MAX_SAFE_INTEGER\n    );\n    let pred = new Array(neckAdjustedMatrix.length).fill(-1);\n\n    this.setState({\n      visited: visited,\n      queue: queue,\n      path: [],\n    });\n\n    \n\n    visited[source] = true;\n    queue.push(source);\n    distance[source] = 0;\n\n    const bfsAlgo = async () => {\n      pathsearch: while (queue.length > 0) {\n        let node = queue.shift();\n        for (let i = 0; i < neckAdjustedMatrix.length; i++) {\n          if (neckAdjustedMatrix[node][i] === 1) {\n            if (visited[i] === false) {\n              visited[i] = true;\n              distance[i] = distance[node] + 1;\n              pred[i] = node;\n              queue.push(i);\n              this.setState({\n                visited: visited,\n                queue: queue,\n              });\n\n              if (this.props.options.visualize) {\n                await timer(10);\n              }\n\n              if (i === objective) {\n                console.log(\"path found\");\n                break pathsearch;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    function timer(ms) {\n      return new Promise((res) => setTimeout(res, ms));\n    }\n\n    await bfsAlgo();\n\n    let reversePath = [];\n    let crawl = objective;\n    reversePath.push(crawl);\n    while (pred[crawl] !== -1) {\n      reversePath.push(pred[crawl]);\n      crawl = pred[crawl];\n    }\n    this.setState({\n      path: reversePath,\n    });\n\n    return reversePath;\n  };\n\n\n  solve = async () => {\n    let reversepath = await this.findPath();\n    this.props.moveSnake(reversepath);\n  };\n\n  render() {\n    if (this.props.options.visualize) {\n      return (\n        <div>\n          {this.state.queue.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Queue\" style={coordinates} />;\n          })}\n          {this.state.visited.map((node, index) => {\n            if (node === true) {\n              let segment = gridNumToCoordinate(index, this.props.areaSize);\n\n              const coordinates = {\n                left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n                top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n                width: `${this.props.areaSize.pixelSize}px`,\n                height: `${this.props.areaSize.pixelSize}px`,\n              };\n\n              return <div className=\"Visited\" style={coordinates} />;\n            }\n          })}\n          {this.state.path.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Path\" style={coordinates} />;\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default BFS;","import React, { Component } from \"react\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"./matrixUtil\";\n\nclass DFS extends Component {\n  constructor(props) {\n    super(props);\n    this.adjacencyMatrix = generateAdjacencyMatrix(this.props.areaSize);\n    this.state = {\n      queue: [],\n      visited: [],\n      path: [],\n    };\n  }\n\n  findPath = async () => {\n    // snake cant go backwards\n    let snakeneckgridnum =\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][1] *\n        this.props.areaSize.gridWidth +\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][0];\n    let snakeheaddgridnum = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    console.log(snakeneckgridnum);\n    console.log(snakeheaddgridnum);\n\n    // Clone 2D array\n    let neckAdjustedMatrix = this.adjacencyMatrix.map(function (arr) {\n      return arr.slice();\n    });\n\n    neckAdjustedMatrix[snakeheaddgridnum][snakeneckgridnum] = 0;\n    neckAdjustedMatrix[snakeneckgridnum][snakeheaddgridnum] = 0;\n\n    let source = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    const objective = coordinateTogridNum(\n      this.props.gameState.food,\n      this.props.areaSize\n    );\n\n    let visited = new Array(neckAdjustedMatrix.length).fill(false);\n    let queue = [];\n    let distance = new Array(neckAdjustedMatrix.length).fill(\n      Number.MAX_SAFE_INTEGER\n    );\n    let pred = new Array(neckAdjustedMatrix.length).fill(-1);\n\n    this.setState({\n      visited: visited,\n      queue: queue,\n      path: [],\n    });\n\n    visited[source] = true;\n    queue.push(source);\n    distance[source] = 0;\n\n    const dfsAlgo = async () => {\n      pathsearch: while (queue.length > 0) {\n        let node = queue.pop();\n        for (let i = 0; i < neckAdjustedMatrix.length; i++) {\n          if (neckAdjustedMatrix[node][i] === 1) {\n            if (visited[i] === false) {\n              visited[i] = true;\n              distance[i] = distance[node] + 1;\n              pred[i] = node;\n              queue.push(i);\n              this.setState({\n                visited: visited,\n                queue: queue,\n              });\n\n              if (this.props.options.visualize) {\n                await timer(10);\n              }\n\n              if (i === objective) {\n                console.log(\"path found\");\n                break pathsearch;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    function timer(ms) {\n      return new Promise((res) => setTimeout(res, ms));\n    }\n\n    await dfsAlgo();\n\n    let reversePath = [];\n    let crawl = objective;\n    reversePath.push(crawl);\n    while (pred[crawl] !== -1) {\n      reversePath.push(pred[crawl]);\n      crawl = pred[crawl];\n    }\n\n    this.setState({\n      path: reversePath,\n    });\n\n    return reversePath;\n  };\n\n\n  solve = async () => {\n    let reversepath = await this.findPath();\n    this.props.moveSnake(reversepath);\n  };\n\n  render() {\n    if (this.props.options.visualize) {\n      return (\n        <div>\n          {this.state.queue.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Queue\" style={coordinates} />;\n          })}\n          {this.state.visited.map((node, index) => {\n            if (node === true) {\n              let segment = gridNumToCoordinate(index, this.props.areaSize);\n\n              const coordinates = {\n                left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n                top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n                width: `${this.props.areaSize.pixelSize}px`,\n                height: `${this.props.areaSize.pixelSize}px`,\n              };\n\n              return <div className=\"Visited\" style={coordinates} />;\n            }\n          })}\n          {this.state.path.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Path\" style={coordinates} />;\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default DFS;","import React, { Component } from \"react\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"./matrixUtil\";\n\nclass Hamiltonian extends Component {\n  constructor(props) {\n    super(props);\n    this.adjacencyMatrix = generateAdjacencyMatrix(this.props.areaSize);\n    this.state = {\n      path: [],\n    };\n  }\n\n  findPath = () => {\n    // snake cant go backwards\n    let snakeneckgridnum =\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][1] *\n        this.props.areaSize.gridWidth +\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][0];\n    let snakeheaddgridnum = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    console.log(snakeneckgridnum);\n    console.log(snakeheaddgridnum);\n\n    // Clone 2D array\n    let neckAdjustedMatrix = this.adjacencyMatrix.map(function (arr) {\n      return arr.slice();\n    });\n\n    neckAdjustedMatrix[snakeheaddgridnum][snakeneckgridnum] = 0;\n    neckAdjustedMatrix[snakeneckgridnum][snakeheaddgridnum] = 0;\n\n    let path = new Array(neckAdjustedMatrix.length).fill(-1);\n\n    this.setState({\n      path: [],\n    });\n\n    let source = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    const objective = coordinateTogridNum(\n      this.props.gameState.food,\n      this.props.areaSize\n    );\n\n    const isSafe = (node, pos) => {\n      if (neckAdjustedMatrix[path[pos - 1]][node] === 0) {\n        return false;\n      }\n\n      for (let i = 0; i < pos; i += 1) {\n        if (path[i] === node) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    const hamCycleUtil = (pos) => {\n      // Base case: all vertices are included in Hamiltonian cycle\n      if (pos === neckAdjustedMatrix.length) {\n        // If there is an edge from last vertice to first vertice\n        if (neckAdjustedMatrix[path[pos - 1]][path[0]] === 1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      // Trying to find next vertice that can be added to the hamiltonian path\n      for (let v = 1; v < neckAdjustedMatrix.length; v += 1) {\n        if (isSafe(v, pos)) {\n          path[pos] = v;\n          // Recurse to finish the path\n          if (hamCycleUtil(pos + 1) === true) {\n            return true;\n          }\n\n          // If added vertex doesnt meet requirements, remove it\n          path[pos] = -1;\n        }\n      }\n\n      // If no vertices can be added to hamiltonian path, return false\n      return false;\n    };\n\n    path[0] = 0;\n\n    if (hamCycleUtil(1) === false) {\n      console.log(\"No path\");\n    }\n    return path;\n  };\n\n  componentDidMount() {\n    this.solve();\n  }\n\n  solve = () => {\n    let reversepath = this.findPath();\n\n    console.log(reversepath);\n\n    let i = reversepath.length - 1;\n\n    let snakeHead = this.props.gameState.snake[\n      this.props.gameState.snake.length - 1\n    ];\n\n    let moveSnake = () => {\n      setTimeout(() => {\n        if (\n          reversepath[i] ===\n          coordinateTogridNum(snakeHead, this.props.areaSize) + 1\n        ) {\n          console.log(\"Moving snake right\");\n          this.props.moveSnakeRight();\n          snakeHead = [snakeHead[0] + 1, snakeHead[1]];\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            this.props.gameState.snake[this.props.gameState.snake.length - 1],\n            this.props.areaSize\n          ) -\n            1\n        ) {\n          console.log(\"Moving snake left\");\n          this.props.moveSnakeLeft();\n          snakeHead = [snakeHead[0] - 1, snakeHead[1]];\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            this.props.gameState.snake[this.props.gameState.snake.length - 1],\n            this.props.areaSize\n          ) +\n            this.props.areaSize.gridWidth\n        ) {\n          console.log(\"Moving snake down\");\n          this.props.moveSnakeDown();\n          snakeHead = [snakeHead[0], snakeHead[1] + 1];\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            this.props.gameState.snake[this.props.gameState.snake.length - 1],\n            this.props.areaSize\n          ) -\n            this.props.areaSize.gridWidth\n        ) {\n          console.log(\"Moving snake up\");\n          this.props.moveSnakeUp();\n          snakeHead = [snakeHead[0], snakeHead[1] - 1];\n        }\n\n        i--;\n        if (i >= 0) {\n          moveSnake();\n        }\n      }, 10);\n    };\n\n    // moveSnake();\n  };\n\n  render() {\n    if (this.props.options.visualize) {\n      return (\n        <div>\n          {this.state.path.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Path\" style={coordinates} />;\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Hamiltonian;","// Queue Element consisting of the element and its priority\n\nclass QueueElement {\n    constructor(element, priority) {\n      this.element = element;\n      this.priority = priority;\n    }\n  }\n  \n  // PriorityQueue implementation based off minHeap\n  \n  class PriorityQueue {\n    constructor() {\n      this.heap = [];\n    }\n  \n    // element of arr[i] children can be found in arr[2i+1] and arr[2i+2] and its parent index arr[Math.floor((i-1)/2)]\n  \n    push = (element, priority) => {\n  \n      let queueElement = new QueueElement(element, priority);\n  \n      this.heap.push(queueElement);\n  \n      let index = this.heap.length - 1;\n  \n      while (index > 0) {\n        let node = this.heap[index];\n        let parentIndex = Math.floor((index - 1) / 2);\n        let parent = this.heap[parentIndex];\n  \n        if (parent.priority <= node.priority) {\n          break;\n        } else {\n          this.heap[index] = parent;\n          this.heap[parentIndex] = node;\n          index = parentIndex;\n        }\n      }\n    };\n  \n    minHeapify = (index) => {\n      let leftchild = 2 * index + 1;\n      let rightchild = 2 * index + 2;\n      let smallest = index;\n  \n      const length = this.heap.length;\n  \n      if (leftchild < length && this.heap[leftchild].priority < this.heap[index].priority) {\n        smallest = leftchild;\n      }\n  \n      if (rightchild < length && this.heap[rightchild].priority < this.heap[index].priority) {\n        smallest = rightchild;\n      }\n  \n      if (smallest !== index) {\n        let largerNode = this.heap[smallest];\n        this.heap[smallest] = this.heap[index];\n        this.heap[index] = largerNode;\n        this.minHeapify(smallest);\n      }\n    };\n  \n    pop = () => {\n      let max = this.heap[0];\n      this.heap[0] = this.heap.pop();\n  \n      this.minHeapify(0);\n  \n      return max.element;\n    };\n  \n    peak = () => {\n      return this.heap[0].element;\n    }\n  \n    isEmpty = () => {\n      if (this.heap.length === 0) {\n        return true\n      }\n      return false;\n    }\n  \n    elements = () => {\n      const elements = [];\n  \n      this.heap.forEach((queueElement) => {\n        elements.push(queueElement.element);\n      }) \n  \n      return elements;\n  \n    }\n  }\n  \n  \n  \n  export default PriorityQueue;","import React, { Component } from \"react\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"./matrixUtil\";\nimport PriorityQueue from \"./DataStructures/PriorityQueue\";\n\nclass BestFirstSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.adjacencyMatrix = generateAdjacencyMatrix(this.props.areaSize);\n    this.state = {\n      priorityQueue: [],\n    };\n  }\n\n  // returns Manhattan distance where a, b are grid numbers\n  heuristic = (a, b) => {\n    let aCoordinate = gridNumToCoordinate(a, this.props.areaSize);\n    let bCoordinate = gridNumToCoordinate(b, this.props.areaSize);\n\n    return (\n      Math.abs(aCoordinate[0] - bCoordinate[0]) +\n      Math.abs(aCoordinate[1] - bCoordinate[1])\n    );\n  };\n\n  findPath = async () => {\n    // snake cant go backwards\n    let snakeneckgridnum =\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][1] *\n        this.props.areaSize.gridWidth +\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][0];\n    let snakeheaddgridnum = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    console.log(snakeneckgridnum);\n    console.log(snakeheaddgridnum);\n\n    // Clone 2D array\n    let neckAdjustedMatrix = this.adjacencyMatrix.map(function (arr) {\n      return arr.slice();\n    });\n\n    neckAdjustedMatrix[snakeheaddgridnum][snakeneckgridnum] = 0;\n    neckAdjustedMatrix[snakeneckgridnum][snakeheaddgridnum] = 0;\n\n    let source = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    const objective = coordinateTogridNum(\n      this.props.gameState.food,\n      this.props.areaSize\n    );\n    const camefrom = [];\n    camefrom[source] = -1;\n\n    const priorityQueue = new PriorityQueue();\n\n    priorityQueue.push(source, 0);\n\n    this.setState({\n      priorityQueue: priorityQueue.elements(),\n    });\n\n    const bestfsalgo = async () => {\n      while (!priorityQueue.isEmpty()) {\n        let current = priorityQueue.pop();\n\n        if (current === objective) {\n          break;\n        }\n\n        for (let i = 0; i < neckAdjustedMatrix.length; i += 1) {\n          if (neckAdjustedMatrix[current][i] === 1) {\n            if (!camefrom.includes(i)) {\n              let priority = this.heuristic(objective, i);\n              priorityQueue.push(i, priority);\n              camefrom[i] = current;\n\n              this.setState({\n                priorityQueue: priorityQueue.elements(),\n              });\n\n              if (this.props.options.visualize) {\n                await timer(10);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    function timer(ms) {\n      return new Promise((res) => setTimeout(res, ms));\n    }\n\n    await bestfsalgo();\n\n    let reversePath = [];\n    let crawl = objective;\n    reversePath.push(crawl);\n    while (camefrom[crawl] !== -1) {\n      reversePath.push(camefrom[crawl]);\n      crawl = camefrom[crawl];\n    }\n\n    return reversePath;\n  };\n\n\n  solve = async () => {\n    let reversepath = await this.findPath();\n    this.props.moveSnake(reversepath);\n  };\n\n  render() {\n    if (this.props.options.visualize) {\n      return (\n        <div>\n          {this.state.priorityQueue.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Queue\" style={coordinates} />;\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default BestFirstSearch;","import React, { Component } from \"react\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"./matrixUtil\";\nimport PriorityQueue from \"./DataStructures/PriorityQueue\";\n\nclass Astar extends Component {\n  constructor(props) {\n    super(props);\n    this.adjacencyMatrix = generateAdjacencyMatrix(this.props.areaSize);\n    this.state = {\n      priorityQueue: [],\n    };\n  }\n\n  // returns Manhattan distance where a, b are grid numbers\n  heuristic = (a, b) => {\n    let aCoordinate = gridNumToCoordinate(a, this.props.areaSize);\n    let bCoordinate = gridNumToCoordinate(b, this.props.areaSize);\n\n    return (\n      Math.abs(aCoordinate[0] - bCoordinate[0]) +\n      Math.abs(aCoordinate[1] - bCoordinate[1])\n    );\n  };\n\n  findPath = async () => {\n    // snake cant go backwards\n    let snakeneckgridnum =\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][1] *\n        this.props.areaSize.gridWidth +\n      this.props.gameState.snake[this.props.gameState.snake.length - 2][0];\n    let snakeheaddgridnum = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n\n    // Clone 2D array\n    let neckAdjustedMatrix = this.adjacencyMatrix.map(function (arr) {\n      return arr.slice();\n    });\n\n    neckAdjustedMatrix[snakeheaddgridnum][snakeneckgridnum] = 0;\n    neckAdjustedMatrix[snakeneckgridnum][snakeheaddgridnum] = 0;\n\n    let source = coordinateTogridNum(\n      this.props.gameState.snake[this.props.gameState.snake.length - 1],\n      this.props.areaSize\n    );\n\n    const objective = coordinateTogridNum(\n      this.props.gameState.food,\n      this.props.areaSize\n    );\n\n    console.log(snakeheaddgridnum);\n    console.log(objective)\n\n    const camefrom = [];\n    const costsofar = [];\n    camefrom[source] = -1;\n    costsofar[source] = 0;\n\n    const priorityQueue = new PriorityQueue();\n\n    priorityQueue.push(source, 0);\n\n    this.setState({\n      priorityQueue: priorityQueue.elements(),\n    });\n\n    const aStarAlgo = async () => {\n      while (!priorityQueue.isEmpty()) {\n        let current = priorityQueue.pop();\n\n        if (current === objective) {\n          break;\n        }\n\n        for (let i = 0; i < neckAdjustedMatrix.length; i += 1) {\n          if (neckAdjustedMatrix[current][i] === 1) {\n              let newcost = costsofar[current] + 1; // all weights are equal so cost is 1\n            if (!camefrom.includes(i) | newcost < costsofar[i]) {\n                costsofar[i] = newcost;\n              let priority = this.heuristic(objective, i) + newcost;\n              priorityQueue.push(i, priority);\n              camefrom[i] = current;\n\n              this.setState({\n                priorityQueue: priorityQueue.elements(),\n              });\n\n              if (this.props.options.visualize) {\n                await timer(10);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    function timer(ms) {\n      return new Promise((res) => setTimeout(res, ms));\n    }\n\n    await aStarAlgo();\n\n    let reversePath = [];\n    let crawl = objective;\n    reversePath.push(crawl);\n    while (camefrom[crawl] !== -1) {\n      reversePath.push(camefrom[crawl]);\n      crawl = camefrom[crawl];\n    }\n\n    return reversePath;\n  };\n\n  solve = async () => {\n    let reversepath = await this.findPath();\n    this.props.moveSnake(reversepath);\n  };\n\n  render() {\n    if (this.props.options.visualize) {\n      return (\n        <div>\n          {this.state.priorityQueue.map((node, index) => {\n            let segment = gridNumToCoordinate(node, this.props.areaSize);\n\n            const coordinates = {\n              left: `${segment[0] * this.props.areaSize.pixelSize}px`,\n              top: `${segment[1] * this.props.areaSize.pixelSize}px`,\n              width: `${this.props.areaSize.pixelSize}px`,\n              height: `${this.props.areaSize.pixelSize}px`,\n            };\n\n            return <div className=\"Queue\" style={coordinates} />;\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Astar;","import React, { Component } from \"react\";\nimport Snake from \"./Snake.js\";\nimport SnakeFood from \"./SnakeFood.js\";\nimport BFS from \"../Algorithms/BFS\";\nimport DFS from \"../Algorithms/DFS\";\nimport Hamiltonian from \"../Algorithms/Hamiltonian\";\nimport BestFirstSearch from \"../Algorithms/BestFirstSearch\";\nimport Astar from \"../Algorithms/Astar\";\nimport {\n  generateAdjacencyMatrix,\n  coordinateTogridNum,\n  gridNumToCoordinate,\n} from \"../Algorithms/matrixUtil\";\n\nconst initialState = {\n  snake: [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n  ],\n  direction: \"RIGHT\"\n};\n\nclass SnakeGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: [\n        [0, 0],\n        [1, 0],\n        [2, 0],\n      ],\n      food: this.getRandomCoordinate(),\n      direction: \"RIGHT\",\n      eaten: false,\n      currentAlgo: \"BFS\"\n    };\n    let manualsnake;\n  }\n\n  getRandomCoordinate = () => {\n    const min = 0;\n    const xmax = this.props.areaSettings.gridWidth;\n    const ymax = this.props.areaSettings.gridHeight;\n    let randcor = [\n      Math.floor(Math.random() * xmax + min),\n      Math.floor(Math.random() * ymax + min),\n    ];\n\n    return randcor;\n  };\n\n  componentDidUpdate() {\n    this.isOutOfBounds();\n    this.isSelfBite();\n    this.isEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        if (this.state.direction !== \"DOWN\") {\n          this.setState({ direction: \"UP\" });\n        }\n        break;\n      case 40:\n        if (this.state.direction !== \"UP\") {\n          this.setState({ direction: \"DOWN\" });\n        }\n        break;\n      case 37:\n        if (this.state.direction !== \"RIGHT\") {\n          this.setState({ direction: \"LEFT\" });\n        }\n        break;\n      case 39:\n        if (this.state.direction !== \"LEFT\") {\n          this.setState({ direction: \"RIGHT\" });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n\n    switch (this.state.direction) {\n      case \"UP\":\n        head = [head[0], head[1] - 1];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 1];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 1, head[1]];\n        break;\n      case \"RIGHT\":\n        head = [head[0] + 1, head[1]];\n        break;\n      default:\n        break;\n    }\n    segments.push(head);\n    segments.shift();\n    this.setState({ snake: segments });\n  };\n\n  moveSnakeUp = () => {\n    this.setState({ direction: \"UP\" });\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n    head = [head[0], head[1] - 1];\n    segments.push(head);\n    segments.shift();\n    this.setState({ snake: segments });\n  };\n\n  moveSnakeDown = () => {\n    this.setState({ direction: \"DOWN\" });\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n    head = [head[0], head[1] + 1];\n    segments.push(head);\n    segments.shift();\n    this.setState({ snake: segments });\n  };\n\n  moveSnakeLeft = () => {\n    this.setState({ direction: \"LEFT\" });\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n    head = [head[0] - 1, head[1]];\n    segments.push(head);\n    segments.shift();\n    this.setState({ snake: segments });\n  };\n\n  moveSnakeRight = () => {\n    this.setState({ direction: \"RIGHT\" });\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n    head = [head[0] + 1, head[1]];\n    segments.push(head);\n    segments.shift();\n    this.setState({ snake: segments });\n  };\n\n  isOutOfBounds = () => {\n    let head = this.state.snake[this.state.snake.length - 1];\n    if (\n      head[0] >= this.props.areaSettings.gridWidth ||\n      head[1] >= this.props.areaSettings.gridHeight ||\n      head[0] < 0 ||\n      head[1] < 0\n    ) {\n      this.gameOver();\n    }\n  };\n\n  gameOver = () => {\n    alert(`Game Over! Your score is ${this.props.gameScore}`);\n    this.setState(initialState);\n    this.setState({ food: this.getRandomCoordinate(), currentAlgo: this.props.algorithm }, () => {\n      clearInterval(this.manualsnake);\n      switch (this.state.currentAlgo) {\n        case \"BFS\":\n          this.refs.BFS.solve();\n          break;\n        case \"DFS\":\n          this.refs.DFS.solve();\n          break;\n        case \"BestFS\":\n          this.refs.BestFirstSearch.solve();\n          break;\n        case \"Astar\":\n          this.refs.Astar.solve();\n          break;\n        case \"Human\":\n          this.manualsnake = setInterval(this.moveSnake, this.props.gameSettings.snakeSpeed);\n          break;\n        default:\n          break;\n      }\n    });\n    \n    this.props.scoreChangehandler(0);\n  };\n\n  isSelfBite = () => {\n    let segments = [...this.state.snake];\n    let head = segments[segments.length - 1];\n\n    segments.pop();\n\n    segments.forEach((segment) => {\n      if (segment[0] === head[0] && segment[1] === head[1]) {\n        alert(\"BIT YOURSELF\");\n        this.gameOver();\n      }\n    });\n  };\n\n  isEat = () => {\n    let head = this.state.snake[this.state.snake.length - 1];\n\n    if (head[0] === this.state.food[0] && head[1] === this.state.food[1]) {\n\n      if (this.props.gameSettings.enlargeSnake) {\n        this.increaseLength();\n      }\n\n      this.props.scoreChangehandler(this.props.gameScore + 1);\n\n      this.setState(\n        { food: this.getRandomCoordinate(), currentAlgo: this.props.algorithm},\n        () => {\n          clearInterval(this.manualsnake);\n          switch (this.state.currentAlgo) {\n            case \"BFS\":\n              this.refs.BFS.solve();\n              break;\n            case \"DFS\":\n              this.refs.DFS.solve();\n              break;\n            case \"BestFS\":\n              this.refs.BestFirstSearch.solve();\n              break;\n            case \"Astar\":\n              this.refs.Astar.solve();\n              break;\n            case \"Human\":\n              this.manualsnake = setInterval(this.moveSnake, this.props.gameSettings.snakeSpeed);\n              document.onkeydown = this.onKeyDown;\n            default:\n              break;\n          }\n        }\n      );\n    }\n  };\n\n  increaseLength = () => {\n    let segments = [...this.state.snake];\n    segments.unshift([]);\n    this.setState({ snake: segments });\n  };\n\n  algoMoveSnake = (reversepath) => {\n    let i = reversepath.length - 1;\n    \n    const move = () => {\n\n      let snakeHead = this.state.snake[\n        this.state.snake.length - 1\n      ];\n\n      setTimeout(() => {\n        if (\n          reversepath[i] ===\n          coordinateTogridNum(snakeHead, this.props.areaSettings) + 1\n        ) {\n          console.log(\"Moving snake right\");\n          this.moveSnakeRight();\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            snakeHead,\n            this.props.areaSettings\n          ) -\n            1\n        ) {\n          console.log(\"Moving snake left\");\n          this.moveSnakeLeft();\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            snakeHead,\n            this.props.areaSettings\n          ) +\n          this.props.areaSettings.gridWidth\n        ) {\n          console.log(\"Moving snake down\");\n          this.moveSnakeDown();\n        } else if (\n          reversepath[i] ===\n          coordinateTogridNum(\n            snakeHead,\n            this.props.areaSettings\n          ) -\n          this.props.areaSettings.gridWidth\n        ) {\n          console.log(\"Moving snake up\");\n          this.moveSnakeUp();\n        } else {\n          console.log(reversepath[i])\n          console.log(snakeHead)\n          console.log(\"illegal move\")\n        }\n\n        i--;\n        if (i >= 0) {\n          move();\n        }\n      }, this.props.gameSettings.snakeSpeed);\n    };\n\n    move();\n  }\n\n  render() {\n    const gameArea = {\n      width: `${\n        this.props.areaSettings.gridWidth * this.props.areaSettings.pixelSize\n      }px`,\n      height: `${\n        this.props.areaSettings.gridHeight * this.props.areaSettings.pixelSize\n      }px`,\n    };\n\n    const bfs = (\n      <BFS\n        ref=\"BFS\"\n        gameState={this.state}\n        areaSize={this.props.areaSettings}\n        moveSnake={this.algoMoveSnake}\n        options={{\n          visualize: this.props.visualize,\n          snakeSpeed: this.props.gameSettings.snakeSpeed,\n        }}\n      />\n    );\n\n    const dfs = (\n      <DFS\n        ref=\"DFS\"\n        gameState={this.state}\n        areaSize={this.props.areaSettings}\n        moveSnake={this.algoMoveSnake}\n        options={{\n          visualize: this.props.visualize,\n          snakeSpeed: this.props.gameSettings.snakeSpeed,\n        }}\n      />\n    );\n\n    const hamil = (\n      <Hamiltonian\n        ref=\"HAMIL\"\n        gameState={this.state}\n        areaSize={this.props.areaSettings}\n        moveSnake={this.algoMoveSnake}\n        options={{\n          visualize: this.props.visualize,\n          snakeSpeed: this.props.gameSettings.snakeSpeed,\n        }}\n      />\n    );\n\n    const bestFS = (\n      <BestFirstSearch\n        ref=\"BestFirstSearch\"\n        gameState={this.state}\n        areaSize={this.props.areaSettings}\n        moveSnake={this.algoMoveSnake}\n        options={{\n          visualize: this.props.visualize,\n          snakeSpeed: this.props.gameSettings.snakeSpeed,\n        }}\n      />\n    );\n\n    const aStar = (\n      <Astar\n        ref=\"Astar\"\n        gameState={this.state}\n        areaSize={this.props.areaSettings}\n        moveSnake={this.algoMoveSnake}\n        options={{\n          visualize: this.props.visualize,\n          snakeSpeed: this.props.gameSettings.snakeSpeed,\n        }}\n      />\n    );\n\n    let algorithm;\n\n    switch (this.state.currentAlgo) {\n      case \"BFS\":\n        algorithm = bfs;\n        break;\n      case \"DFS\":\n        algorithm = dfs;\n        break;\n      case \"Hamil\":\n        algorithm = hamil;\n        break;\n      case \"BestFS\":\n        algorithm = bestFS;\n        break;\n      case \"Astar\":\n        algorithm = aStar;\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"GameArea\">\n        <Snake\n          snake={this.state.snake}\n          pixelSize={this.props.areaSettings.pixelSize}\n        />\n        <SnakeFood\n          coordinates={this.state.food}\n          pixelSize={this.props.areaSettings.pixelSize}\n        />\n        {algorithm}\n      </div>\n    );\n  }\n}\n\nexport default SnakeGame;","import React, { Component } from \"react\";\nimport SnakeGame from \"./SnakeGame/SnakeGame\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Form from \"react-bootstrap/Form\";\nimport BootstrapSwitchButton from \"bootstrap-switch-button-react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameAreaSettings: {\n        gridHeight: 30,\n        gridWidth: 50,\n        pixelSize: 20,\n      },\n      algorithm: \"BFS\",\n      visualize: false,\n      gameSettings: {\n        snakeSpeed: 40,\n        enlargeSnake: false,\n      },\n      score: 0,\n      ready: false\n    };\n  }\n\n  handleScorechange = (val) => {\n    this.setState({ score: val });\n  };\n\n  handleWindowSize = () => {\n\n    const gameHeight = this.divElement.clientHeight;\n    const gameWidth = this.divElement.clientWidth;\n\n    this.setState({ready: false}, () => {\n      this.setState({\n        gameAreaSettings: {\n          gridHeight: Math.floor(gameHeight / 20),\n          gridWidth: Math.floor(gameWidth / 20),\n          pixelSize: 20\n        }\n      }, () => {\n        this.setState({ready: true}, () => {\n          this.refs.SnakeGame.refs.BFS.solve();\n        });\n        \n      });\n    })\n    \n  }\n\n  componentDidMount () {\n    this.handleWindowSize();\n    window.addEventListener('resize', this.handleWindowSize);\n  }\n  \n  render() {\n\n    return (\n      <div className=\"App\">\n        <div>\n          <Jumbotron\n            fluid\n            style={{ marginBottom: \"0px\", backgroundColor: \"#008b00\" }}\n          >\n            <Container>\n              <h1>🐍Snake AI</h1>\n              <p>\n                A Snake Game that can be played by an AI that can help visualize\n                several search algorithms.\n              </p>\n            </Container>\n          </Jumbotron>\n        </div>\n        <div>\n          <Container fluid className=\"h-100\">\n            <Row className=\"h-100\">\n              <Col sm={4} align=\"center\" style={{ margin: \"auto\" }}>\n                <div className=\"d-flex flex-column h-100\">\n                  <Row className=\"justify-content-center\">\n                    <div id=\"score\">🍎Score: {this.state.score}</div>\n                  </Row>\n                  <Row className=\"justify-content-center\">\n                    <Form className=\"form\">\n                      <Form.Group as={Row}>\n                        <Form.Label column>Algorithm:</Form.Label>\n                        <Col>\n                          <Dropdown>\n                            <Dropdown.Toggle\n                              variant=\"success\"\n                              id=\"dropdown-basic\"\n                            >\n                              {this.state.algorithm}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.setState({ algorithm: \"BFS\" });\n                                }}\n                              >\n                                BFS\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.setState({ algorithm: \"DFS\" });\n                                }}\n                              >\n                                DFS\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.setState({ algorithm: \"BestFS\" });\n                                }}\n                              >\n                                Greedy Best First Search\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.setState({ algorithm: \"Astar\" });\n                                }}\n                              >\n                                A star\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.setState({ algorithm: \"Human\" });\n                                }}\n                              >\n                                Human Player\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </Col>\n                      </Form.Group>\n                      <Form.Group as={Row}>\n                        <Form.Label column>Algorithm Visualization</Form.Label>\n                        <Col>\n                          <BootstrapSwitchButton\n                            checked={this.state.visualize}\n                            onlabel=\"ON\"\n                            offlabel=\"OFF\"\n                            onChange={(checked: boolean) => {\n                              this.setState({ visualize: checked });\n                            }}\n                          />\n                        </Col>\n                      </Form.Group>\n                      <Form.Group as={Row}>\n                        <Form.Label column>Snake Speed</Form.Label>\n                        <Col>\n                          <Form.Control\n                            type=\"range\"\n                            min=\"10\"\n                            max=\"100\"\n                            step=\"10\"\n                            id=\"snakeSpeed\"\n                            className=\"slider\"\n                            onChange={(event) => {\n                              this.setState({\n                                gameSettings: {\n                                  snakeSpeed: 100 - event.target.value,\n                                  enlargeSnake: this.state.gameSettings\n                                    .enlargeSnake,\n                                },\n                              });\n                            }}\n                          />\n                          {100 - this.state.gameSettings.snakeSpeed}\n                        </Col>\n                      </Form.Group>\n                      <Form.Group as={Row}>\n                        <Form.Label column>\n                          Enlarge Snake after eating apple\n                        </Form.Label>\n                        <Col>\n                          <BootstrapSwitchButton\n                            checked={this.state.enlargeSnake}\n                            onlabel=\"ON\"\n                            offlabel=\"OFF\"\n                            onChange={(checked: boolean) => {\n                              this.setState({\n                                gameSettings: {\n                                  snakeSpeed: this.state.gameSettings\n                                    .snakeSpeed,\n                                  enlargeSnake: checked,\n                                },\n                              });\n                            }}\n                          />\n                        </Col>\n                      </Form.Group>\n                    </Form>\n                  </Row>\n                </div>\n              </Col>\n              <Col sm={8} className=\"area\" id=\"123\">\n                <div ref={ divElement => this.divElement = divElement}>\n                  {this.state.ready ? <SnakeGame\n                    ref=\"SnakeGame\"\n                    areaSettings={this.state.gameAreaSettings}\n                    algorithm={this.state.algorithm}\n                    visualize={this.state.visualize}\n                    gameSettings={this.state.gameSettings}\n                    gameScore={this.state.score}\n                    scoreChangehandler={this.handleScorechange}\n                  /> : <h1 className=\"gameload\">loading</h1>}\n                  \n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}